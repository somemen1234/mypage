//DOM : Document Object Model 의 약자로 JS가 Document(HTML문서)를 알아볼 수 있는 Object 형태로 Modeling한(document를 가져와 파싱 즉 해석한) 결과물 (백엔드에서도 많이 사용하니 이해를 잘 해야 함!!!!)
//JS : 브라우저에서 동작하기 위한 언어, 웹 페이지를 동적으로 만들어주기 위한 언어
//사용자 = 브라우저 = 클라이언트와 같은 의미이다.(우리가 크롬을 통해 클라이언트 역할을 하는 것)
//웹 페이지가 뜨는 과정 
//1. 클라이언트가 서버에게 요청(request)을 함 -> 서버에서 클라이언트에게 응답(response)을 준다 -> 클라이언트가 응답을 수신하는데 응답의 형태가 HTML문서이다.(HTML문서를 클라이언트에게 준다.)
//브라우저는 이 HTML문서를 반드시 해석해야 함 : 기본적으로 렌더링(우리한테 준 HTML문서를 번역해준다) 엔진이 있다. why 해석필요? HTML문서를 JS가 이해할 수 없게 써져 있기 때문에 JS가 알아들을 수 있게 렌더링하는게 필수
//2. 렌더링을 마치면 JS가 해석한 내용을 토대로 트리형태로 된 DOM Tress를 구성함. -> 이것과 CSSOM Tree를 묶어 랜더 트리(Render Tree)를 구성한다.
//3. 마지막으로 화면에 그림을 그리기 위한 레이아웃을 계산 후 페인팅 과정이 시작됨 (요기까지 우리가 요청한 url이 화면에 그려지는 과정)
//Live Server (확장) : 만든 HTML을 구동하기 위해선 서버가 필요한데 바로 vs code 상에서 실행하게 해주는 extension
//스니펫 : 이미 만들어진 형태 (!입력하고 enter하면 html 틀이 나오는 것 처럼) //alt=""(없다면 대체할 내용)
//DOM은 브라우저에 기본적으로 내장되어 있는 API 중 하나 - API를 통해 DOM요소에 접근 해 브라우저의 많은 것을 컨트롤이 가능하다.(DOM요소를 제어하면서)
//API : 주문시 메뉴판과 같은 역할(고객과 음식점 간의 인터페이스 역할)로 다른 시스템에서 데이터나 서비스를 요청할 때 시스템과 사용자 간의 인터페이스 역할 => ☆☆☆다른 시스템에서 제공하는 기능을 사용할 수 있도록 도와주는 중간자 역할
// =>브라우저 역시 DOM과 관련된 API를 제공함으로 브라우저의 DOM객체에 접근 할 수 있도록 도와주는 역할을 함.
//ex) 날씨 앱에서 사용자가 현재 위치 날씨를 확인하려면 앱은 해당 기능을 제공하는 날씨 서비스의 API를 호출해 날씨 정보를 받아오게 됨
//DOM은 항상 브라우저 환경에서만 돌아간다!!(브라우저에 내장되어 있는 DOM API이기 때문에!!) - DOM을 통해 HTML내용을 ☆☆☆접근!할수 있고 제어! 할 수 있다☆☆☆ //JS는 런타임이 두개(브라우저, node)임
//모든 DOM요소의 node들은 속성과 메소드를 가짐!
//ex) document.getElementById("demo").innerHTML = 'Hello World!' //메소드는 동사, 속성은 명사로 생각 => getElementById가 메소드, innerHTML이 속성
//DOM은 계층 구조로 되어 있어 부모자식 관계로 되어있음 


//id="" 같이 특정한 태그를 선택하기 위한 요소를 선택자라 함
//querySelector를 제일 많이 사용 : document.querySelector("#id_name"); //id면 앞에 #을 사용함 => 해당 태그로 접근(쿼리 셀렉터는 #이나 점을 쓰지 않으면 무조건 태그 이름을 잡아옴!)
//document.querySelector("#id_name").children(자식 노드 접근) / parentElement or parentNode(부모 노드 접근)